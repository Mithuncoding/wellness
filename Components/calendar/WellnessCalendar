import React, { useState, useEffect } from 'react';
import { CalendarEvent, User } from "@/entities/all";
import { InvokeLLM } from "@/integrations/Core";
import { Card, CardHeader, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { 
  Calendar, 
  Plus, 
  Clock, 
  Bell, 
  CheckCircle,
  AlertCircle,
  Zap,
  Brain
} from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";

const EVENT_TYPES = {
  workout: { icon: '💪', color: 'bg-blue-100 text-blue-800', gradient: 'from-blue-500 to-cyan-500' },
  meditation: { icon: '🧘', color: 'bg-purple-100 text-purple-800', gradient: 'from-purple-500 to-indigo-500' },
  meal_prep: { icon: '🍽️', color: 'bg-green-100 text-green-800', gradient: 'from-green-500 to-emerald-500' },
  doctor_appointment: { icon: '👩‍⚕️', color: 'bg-red-100 text-red-800', gradient: 'from-red-500 to-pink-500' },
  therapy_session: { icon: '🗣️', color: 'bg-yellow-100 text-yellow-800', gradient: 'from-yellow-500 to-orange-500' },
  wellness_check: { icon: '📊', color: 'bg-teal-100 text-teal-800', gradient: 'from-teal-500 to-cyan-500' },
  habit_reminder: { icon: '⏰', color: 'bg-gray-100 text-gray-800', gradient: 'from-gray-500 to-slate-500' },
  social_activity: { icon: '👥', color: 'bg-pink-100 text-pink-800', gradient: 'from-pink-500 to-rose-500' }
};

export default function WellnessCalendar({ selectedDate = new Date() }) {
  const [events, setEvents] = useState([]);
  const [isCreating, setIsCreating] = useState(false);
  const [newEvent, setNewEvent] = useState({
    event_type: 'workout',
    title: '',
    description: '',
    start_time: '',
    duration: 60
  });
  const [user, setUser] = useState(null);

  useEffect(() => {
    loadEvents();
    loadUser();
  }, [selectedDate]);

  const loadUser = async () => {
    try {
      const userData = await User.me();
      setUser(userData);
    } catch (error) {
      console.error("Error loading user:", error);
    }
  };

  const loadEvents = async () => {
    try {
      const startOfDay = new Date(selectedDate);
      startOfDay.setHours(0, 0, 0, 0);
      
      const endOfDay = new Date(selectedDate);
      endOfDay.setHours(23, 59, 59, 999);

      const allEvents = await CalendarEvent.list('-start_time', 50);
      const dayEvents = allEvents.filter(event => {
        const eventDate = new Date(event.start_time);
        return eventDate >= startOfDay && eventDate <= endOfDay;
      });

      setEvents(dayEvents);
    } catch (error) {
      console.error("Error loading events:", error);
    }
  };

  const createEvent = async () => {
    if (!newEvent.title || !newEvent.start_time) return;

    try {
      const startTime = new Date(`${selectedDate.toDateString()} ${newEvent.start_time}`);
      const endTime = new Date(startTime.getTime() + (newEvent.duration * 60 * 1000));

      // Generate AI suggestions for the event
      const aiPrompt = `
        Create personalized suggestions for a ${newEvent.event_type} event titled "${newEvent.title}".
        User goals: ${user?.wellness_goals?.join(', ') || 'general wellness'}
        Event duration: ${newEvent.duration} minutes
        
        Provide 3-4 specific, actionable suggestions to make this event more effective.
      `;

      const aiResult = await InvokeLLM({
        prompt: aiPrompt,
        response_json_schema: {
          type: "object",
          properties: {
            suggestions: { type: "array", items: { type: "string" } }
          }
        }
      });

      const eventData = {
        ...newEvent,
        start_time: startTime.toISOString(),
        end_time: endTime.toISOString(),
        ai_suggestions: aiResult.suggestions || [],
        reminder_times: [15, 5] // 15 and 5 minutes before
      };

      await CalendarEvent.create(eventData);
      
      setNewEvent({
        event_type: 'workout',
        title: '',
        description: '',
        start_time: '',
        duration: 60
      });
      setIsCreating(false);
      loadEvents();

      // Award points for planning
      if (user) {
        await User.updateMyUserData({
          total_points: (user.total_points || 0) + 5
        });
      }

    } catch (error) {
      console.error("Error creating event:", error);
    }
  };

  const completeEvent = async (eventId) => {
    try {
      await CalendarEvent.update(eventId, { 
        completion_status: 'completed',
        completed_at: new Date().toISOString()
      });
      
      loadEvents();
      
      // Award completion points
      if (user) {
        await User.updateMyUserData({
          total_points: (user.total_points || 0) + 10
        });
      }
    } catch (error) {
      console.error("Error completing event:", error);
    }
  };

  const suggestOptimalTimes = async () => {
    try {
      const prompt = `
        Based on wellness best practices and the user's current schedule, suggest optimal times for different wellness activities today.
        Current events: ${events.length > 0 ? events.map(e => `${e.title} at ${new Date(e.start_time).toLocaleTimeString()}`).join(', ') : 'None scheduled'}
        
        Suggest times for: workout, meditation, meal prep, and wellness check.
        Consider energy levels throughout the day and avoid conflicts.
      `;

      const result = await InvokeLLM({
        prompt,
        response_json_schema: {
          type: "object",
          properties: {
            suggestions: {
              type: "array",
              items: {
                type: "object",
                properties: {
                  activity: { type: "string" },
                  suggested_time: { type: "string" },
                  reason: { type: "string" }
                }
              }
            }
          }
        }
      });

      // Show suggestions in a popup or notification
      alert(`AI Scheduling Suggestions:\n${result.suggestions.map(s => 
        `${s.activity} at ${s.suggested_time}: ${s.reason}`
      ).join('\n')}`);

    } catch (error) {
      console.error("Error getting AI suggestions:", error);
    }
  };

  const getEventTypeConfig = (eventType) => {
    return EVENT_TYPES[eventType] || EVENT_TYPES.habit_reminder;
  };

  const sortedEvents = events.sort((a, b) => 
    new Date(a.start_time) - new Date(b.start_time)
  );

  return (
    <div className="space-y-6">
      <Card className="wellness-card border-0 shadow-xl">
        <CardHeader>
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <Calendar className="w-5 h-5 text-blue-600" />
              <h3 className="text-lg font-semibold text-gray-900">
                {selectedDate.toLocaleDateString('en-US', { 
                  weekday: 'long', 
                  year: 'numeric', 
                  month: 'long', 
                  day: 'numeric' 
                })}
              </h3>
            </div>
            <div className="flex gap-2">
              <Button
                variant="outline"
                size="sm"
                onClick={suggestOptimalTimes}
                className="text-xs"
              >
                <Brain className="w-3 h-3 mr-1" />
                AI Schedule
              </Button>
              <Button
                onClick={() => setIsCreating(true)}
                size="sm"
                className="bg-gradient-to-r from-blue-500 to-purple-500 text-white"
              >
                <Plus className="w-4 h-4 mr-1" />
                Add Event
              </Button>
            </div>
          </div>
        </CardHeader>
        <CardContent>
          <AnimatePresence>
            {isCreating && (
              <motion.div
                initial={{ opacity: 0, height: 0 }}
                animate={{ opacity: 1, height: 'auto' }}
                exit={{ opacity: 0, height: 0 }}
                className="mb-6 p-4 bg-gray-50 rounded-xl"
              >
                <h4 className="font-medium text-gray-900 mb-4">Create New Event</h4>
                <div className="grid md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Event Type</label>
                    <Select
                      value={newEvent.event_type}
                      onValueChange={(value) => setNewEvent(prev => ({ ...prev, event_type: value }))}
                    >
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        {Object.entries(EVENT_TYPES).map(([type, config]) => (
                          <SelectItem key={type} value={type}>
                            <div className="flex items-center gap-2">
                              <span>{config.icon}</span>
                              <span className="capitalize">{type.replace('_', ' ')}</span>
                            </div>
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Title</label>
                    <Input
                      placeholder="e.g., Morning Yoga Session"
                      value={newEvent.title}
                      onChange={(e) => setNewEvent(prev => ({ ...prev, title: e.target.value }))}
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Start Time</label>
                    <Input
                      type="time"
                      value={newEvent.start_time}
                      onChange={(e) => setNewEvent(prev => ({ ...prev, start_time: e.target.value }))}
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Duration (minutes)</label>
                    <Select
                      value={newEvent.duration.toString()}
                      onValueChange={(value) => setNewEvent(prev => ({ ...prev, duration: parseInt(value) }))}
                    >
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="15">15 minutes</SelectItem>
                        <SelectItem value="30">30 minutes</SelectItem>
                        <SelectItem value="45">45 minutes</SelectItem>
                        <SelectItem value="60">1 hour</SelectItem>
                        <SelectItem value="90">1.5 hours</SelectItem>
                        <SelectItem value="120">2 hours</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
                <div className="mt-4">
                  <label className="block text-sm font-medium text-gray-700 mb-1">Description (Optional)</label>
                  <Input
                    placeholder="Additional details..."
                    value={newEvent.description}
                    onChange={(e) => setNewEvent(prev => ({ ...prev, description: e.target.value }))}
                  />
                </div>
                <div className="flex justify-end gap-2 mt-4">
                  <Button variant="outline" onClick={() => setIsCreating(false)}>
                    Cancel
                  </Button>
                  <Button onClick={createEvent} disabled={!newEvent.title || !newEvent.start_time}>
                    Create Event
                  </Button>
                </div>
              </motion.div>
            )}
          </AnimatePresence>

          <div className="space-y-3">
            {sortedEvents.length > 0 ? (
              sortedEvents.map((event) => {
                const config = getEventTypeConfig(event.event_type);
                const startTime = new Date(event.start_time);
                const isCompleted = event.completion_status === 'completed';
                const isPast = new Date() > startTime;
                const isUpcoming = !isPast && new Date() > new Date(startTime.getTime() - 30 * 60 * 1000); // 30 min before

                return (
                  <motion.div
                    key={event.id}
                    initial={{ opacity: 0, y: 10 }}
                    animate={{ opacity: 1, y: 0 }}
                    className={`p-4 rounded-xl border-2 transition-all duration-300 ${
                      isCompleted 
                        ? 'bg-green-50 border-green-200' 
                        : isUpcoming 
                        ? 'bg-blue-50 border-blue-200 shadow-md' 
                        : 'bg-white border-gray-200'
                    }`}
                  >
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-3">
                        <div className={`w-10 h-10 bg-gradient-to-r ${config.gradient} rounded-lg flex items-center justify-center text-white font-medium`}>
                          {config.icon}
                        </div>
                        <div>
                          <h4 className={`font-medium ${isCompleted ? 'line-through text-gray-500' : 'text-gray-900'}`}>
                            {event.title}
                          </h4>
                          <div className="flex items-center gap-2 text-sm text-gray-600">
                            <Clock className="w-3 h-3" />
                            <span>{startTime.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</span>
                            <Badge className={config.color} variant="secondary">
                              {event.event_type.replace('_', ' ')}
                            </Badge>
                          </div>
                        </div>
                      </div>
                      
                      <div className="flex items-center gap-2">
                        {isUpcoming && (
                          <Badge className="bg-blue-100 text-blue-800 animate-pulse">
                            <Bell className="w-3 h-3 mr-1" />
                            Starting Soon
                          </Badge>
                        )}
                        
                        {!isCompleted && (
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => completeEvent(event.id)}
                            className="text-xs"
                          >
                            <CheckCircle className="w-3 h-3 mr-1" />
                            Complete
                          </Button>
                        )}
                        
                        {isCompleted && (
                          <Badge className="bg-green-100 text-green-800">
                            <CheckCircle className="w-3 h-3 mr-1" />
                            Completed
                          </Badge>
                        )}
                      </div>
                    </div>

                    {event.description && (
                      <p className="text-sm text-gray-600 mt-2 ml-13">{event.description}</p>
                    )}

                    {event.ai_suggestions && event.ai_suggestions.length > 0 && (
                      <div className="mt-3 ml-13">
                        <div className="bg-purple-50 rounded-lg p-3">
                          <div className="flex items-center gap-2 mb-2">
                            <Zap className="w-3 h-3 text-purple-600" />
                            <span className="text-xs font-medium text-purple-900">AI Suggestions</span>
                          </div>
                          <div className="space-y-1">
                            {event.ai_suggestions.slice(0, 2).map((suggestion, index) => (
                              <p key={index} className="text-xs text-purple-800">
                                • {suggestion}
                              </p>
                            ))}
                          </div>
                        </div>
                      </div>
                    )}
                  </motion.div>
                );
              })
            ) : (
              <div className="text-center py-8 text-gray-500">
                <Calendar className="w-12 h-12 mx-auto mb-3 text-gray-400" />
                <p>No events scheduled for today</p>
                <p className="text-sm">Add your first wellness event!</p>
              </div>
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
