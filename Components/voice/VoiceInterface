import React, { useState, useEffect } from 'react';
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { 
  Mic, 
  MicOff, 
  Volume2, 
  VolumeX, 
  Brain,
  Loader2
} from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";

export default function VoiceInterface({ 
  onVoiceCommand, 
  isProcessing = false, 
  showWaveform = true,
  aiResponse = null
}) {
  const [isListening, setIsListening] = useState(false);
  const [transcript, setTranscript] = useState('');
  const [recognition, setRecognition] = useState(null);
  const [speechSynthesis, setSpeechSynthesis] = useState(null);
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [voiceSupported, setVoiceSupported] = useState(false);

  useEffect(() => {
    // Check for voice support
    const hasVoiceSupport = 'webkitSpeechRecognition' in window || 'SpeechRecognition' in window;
    const hasSpeechSynthesis = 'speechSynthesis' in window;
    
    setVoiceSupported(hasVoiceSupport && hasSpeechSynthesis);

    if (hasVoiceSupport) {
      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
      const recognitionInstance = new SpeechRecognition();
      
      recognitionInstance.continuous = false;
      recognitionInstance.interimResults = true;
      recognitionInstance.lang = 'en-US';
      
      recognitionInstance.onresult = (event) => {
        let finalTranscript = '';
        let interimTranscript = '';
        
        for (let i = event.resultIndex; i < event.results.length; i++) {
          const transcript = event.results[i][0].transcript;
          if (event.results[i].isFinal) {
            finalTranscript += transcript;
          } else {
            interimTranscript += transcript;
          }
        }
        
        setTranscript(finalTranscript || interimTranscript);
        
        if (finalTranscript) {
          onVoiceCommand(finalTranscript);
          setTranscript('');
        }
      };
      
      recognitionInstance.onerror = (event) => {
        console.error('Speech recognition error:', event.error);
        setIsListening(false);
      };
      
      recognitionInstance.onend = () => {
        setIsListening(false);
      };
      
      setRecognition(recognitionInstance);
    }

    if (hasSpeechSynthesis) {
      setSpeechSynthesis(window.speechSynthesis);
    }
  }, [onVoiceCommand]);

  const startListening = () => {
    if (recognition && !isListening) {
      setIsListening(true);
      setTranscript('');
      recognition.start();
    }
  };

  const stopListening = () => {
    if (recognition && isListening) {
      recognition.stop();
      setIsListening(false);
    }
  };

  const speakResponse = (text) => {
    if (speechSynthesis && text) {
      // Cancel any ongoing speech
      speechSynthesis.cancel();
      
      const utterance = new SpeechSynthesisUtterance(text);
      utterance.rate = 0.9;
      utterance.pitch = 1;
      utterance.volume = 0.8;
      
      // Try to use a pleasant female voice
      const voices = speechSynthesis.getVoices();
      const preferredVoice = voices.find(voice => 
        voice.name.includes('Female') || 
        voice.name.includes('Samantha') ||
        voice.name.includes('Karen') ||
        voice.gender === 'female'
      );
      
      if (preferredVoice) {
        utterance.voice = preferredVoice;
      }
      
      utterance.onstart = () => setIsSpeaking(true);
      utterance.onend = () => setIsSpeaking(false);
      utterance.onerror = () => setIsSpeaking(false);
      
      speechSynthesis.speak(utterance);
    }
  };

  const stopSpeaking = () => {
    if (speechSynthesis) {
      speechSynthesis.cancel();
      setIsSpeaking(false);
    }
  };

  // Auto-speak AI responses
  useEffect(() => {
    if (aiResponse && !isSpeaking) {
      speakResponse(aiResponse);
    }
  }, [aiResponse]);

  if (!voiceSupported) {
    return (
      <Card className="bg-gray-50 border-gray-200">
        <CardContent className="p-4 text-center">
          <p className="text-sm text-gray-600">Voice features not supported in this browser</p>
        </CardContent>
      </Card>
    );
  }

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="fixed bottom-6 right-6 z-50"
    >
      <Card className="glass-morphism border-0 shadow-2xl">
        <CardContent className="p-4">
          <div className="flex items-center gap-3">
            {/* Voice Input Button */}
            <motion.div
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              <Button
                onClick={isListening ? stopListening : startListening}
                disabled={isProcessing}
                className={`relative w-12 h-12 rounded-full ${
                  isListening 
                    ? 'bg-red-500 hover:bg-red-600' 
                    : 'bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600'
                }`}
              >
                {isProcessing ? (
                  <Loader2 className="w-5 h-5 animate-spin text-white" />
                ) : isListening ? (
                  <MicOff className="w-5 h-5 text-white" />
                ) : (
                  <Mic className="w-5 h-5 text-white" />
                )}
                
                {/* Listening animation */}
                {isListening && showWaveform && (
                  <motion.div
                    className="absolute inset-0 rounded-full border-2 border-red-300"
                    animate={{
                      scale: [1, 1.2, 1],
                      opacity: [1, 0.5, 1]
                    }}
                    transition={{
                      duration: 1,
                      repeat: Infinity,
                      ease: "easeInOut"
                    }}
                  />
                )}
              </Button>
            </motion.div>

            {/* Voice Output Button */}
            <Button
              onClick={isSpeaking ? stopSpeaking : () => speakResponse("Hello! How can I help you today?")}
              variant="outline"
              size="icon"
              className="w-10 h-10 rounded-full"
            >
              {isSpeaking ? (
                <VolumeX className="w-4 h-4" />
              ) : (
                <Volume2 className="w-4 h-4" />
              )}
            </Button>

            {/* Status Indicators */}
            <div className="flex flex-col gap-1">
              <AnimatePresence>
                {isListening && (
                  <motion.div
                    initial={{ opacity: 0, x: 20 }}
                    animate={{ opacity: 1, x: 0 }}
                    exit={{ opacity: 0, x: 20 }}
                  >
                    <Badge className="bg-red-100 text-red-800">
                      Listening...
                    </Badge>
                  </motion.div>
                )}
                
                {isProcessing && (
                  <motion.div
                    initial={{ opacity: 0, x: 20 }}
                    animate={{ opacity: 1, x: 0 }}
                    exit={{ opacity: 0, x: 20 }}
                  >
                    <Badge className="bg-blue-100 text-blue-800">
                      <Brain className="w-3 h-3 mr-1" />
                      Processing...
                    </Badge>
                  </motion.div>
                )}
                
                {isSpeaking && (
                  <motion.div
                    initial={{ opacity: 0, x: 20 }}
                    animate={{ opacity: 1, x: 0 }}
                    exit={{ opacity: 0, x: 20 }}
                  >
                    <Badge className="bg-green-100 text-green-800">
                      Speaking...
                    </Badge>
                  </motion.div>
                )}
              </AnimatePresence>
            </div>
          </div>

          {/* Live Transcript */}
          <AnimatePresence>
            {transcript && (
              <motion.div
                initial={{ opacity: 0, height: 0 }}
                animate={{ opacity: 1, height: 'auto' }}
                exit={{ opacity: 0, height: 0 }}
                className="mt-3 p-2 bg-gray-50 rounded-lg"
              >
                <p className="text-sm text-gray-700">"{transcript}"</p>
              </motion.div>
            )}
          </AnimatePresence>

          {/* Quick Commands */}
          <div className="mt-2 flex flex-wrap gap-1">
            {[
              "How am I doing?",
              "Log my mood",
              "Start workout",
              "What should I eat?"
            ].map((command) => (
              <button
                key={command}
                onClick={() => onVoiceCommand(command)}
                className="text-xs px-2 py-1 bg-gray-100 hover:bg-gray-200 rounded transition-colors"
              >
                {command}
              </button>
            ))}
          </div>
        </CardContent>
      </Card>
    </motion.div>
  );
}
