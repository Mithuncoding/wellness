import React, { useState, useEffect } from "react";
import { User, MoodEntry, WorkoutSession } from "@/entities/all";
import { InvokeLLM } from "@/integrations/Core";
import { 
  Heart, 
  Brain, 
  Zap, 
  Target, 
  Calendar,
  TrendingUp,
  Award,
  Activity,
  Mic,
  Users
} from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";

import StatsCard from "../components/wellness/StatsCard";
import AIInsightCard from "../components/wellness/AIInsightCard";
import VoiceInterface from "../components/voice/VoiceInterface";
import RealTimeMetrics from "../components/realtime/RealTimeMetrics";
import WellnessCalendar from "../components/calendar/WellnessCalendar";
import OnboardingFlow from "../components/onboarding/OnboardingFlow";

export default function Dashboard() {
  const [user, setUser] = useState(null);
  const [moodData, setMoodData] = useState([]);
  const [workouts, setWorkouts] = useState([]);
  const [aiInsight, setAiInsight] = useState("");
  const [recommendations, setRecommendations] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [showOnboarding, setShowOnboarding] = useState(false);
  const [isProcessingVoice, setIsProcessingVoice] = useState(false);
  const [aiResponse, setAiResponse] = useState(null);

  useEffect(() => {
    loadDashboardData();
  }, []);

  const loadDashboardData = async () => {
    try {
      const [userData, moods, workoutData] = await Promise.all([
        User.me(),
        MoodEntry.list('-created_date', 7),
        WorkoutSession.list('-created_date', 5)
      ]);
      
      setUser(userData);
      setMoodData(moods);
      setWorkouts(workoutData);
      
      // Check if onboarding is needed
      if (!userData.onboarding_completed) {
        setShowOnboarding(true);
      } else {
        // Generate AI insights
        if (moods.length > 0) {
          await generateAIInsights(moods, workoutData, userData);
        }
      }
    } catch (error) {
      console.error("Error loading dashboard:", error);
    }
    setIsLoading(false);
  };

  const generateAIInsights = async (moods, workouts, user) => {
    try {
      const prompt = `
        As an AI wellness coach named ${user.ai_personality?.coach_name || 'Aria'}, analyze this user's data and provide personalized insights and recommendations in a ${user.ai_personality?.coaching_style || 'friendly'} tone:
        
        User Goals: ${user.wellness_goals?.join(', ') || 'General wellness'}
        Current Streak: ${user.current_streak || 0} days
        Activity Level: ${user.profile_setup?.activity_level || 'unknown'}
        
        Recent Mood Data (last 7 days):
        ${moods.map(m => `Date: ${m.created_date}, Score: ${m.mood_score}/10, Emotions: ${m.emotion_tags?.join(', ')}`).join('\n')}
        
        Recent Workouts: ${workouts.length} sessions completed
        
        Provide a warm, personalized insight about their wellness trends and 3-4 specific actionable recommendations.
      `;

      const result = await InvokeLLM({
        prompt,
        response_json_schema: {
          type: "object",
          properties: {
            insight: { type: "string" },
            recommendations: { 
              type: "array", 
              items: { type: "string" } 
            }
          }
        }
      });

      setAiInsight(result.insight);
      setRecommendations(result.recommendations);
    } catch (error) {
      console.error("Error generating AI insights:", error);
      setAiInsight("Welcome to your wellness journey! I'm here to help you achieve your goals. Let's start by tracking your daily habits and mood.");
      setRecommendations([
        "Log your mood daily for personalized insights",
        "Set up your wellness goals in settings",
        "Try a quick 10-minute workout",
        "Use voice commands to interact with me!"
      ]);
    }
  };

  const handleVoiceCommand = async (command) => {
    setIsProcessingVoice(true);
    setAiResponse(null);

    try {
      const prompt = `
        As ${user?.ai_personality?.coach_name || 'Aria'}, the user's AI wellness coach, respond to this voice command: "${command}"
        
        User context:
        - Goals: ${user?.wellness_goals?.join(', ') || 'None set'}
        - Current streak: ${user?.current_streak || 0} days
        - Total points: ${user?.total_points || 0}
        - Recent mood trend: ${moodData.length > 0 ? 'Available' : 'No data'}
        
        Provide a helpful, encouraging response in a ${user?.ai_personality?.coaching_style || 'friendly'} tone. 
        If they're asking about specific features, guide them appropriately.
        Keep responses concise but warm.
      `;

      const result = await InvokeLLM({
        prompt,
        response_json_schema: {
          type: "object",
          properties: {
            response: { type: "string" },
            action_suggested: { type: "string" },
            page_redirect: { type: "string" }
          }
        }
      });

      setAiResponse(result.response);

      // Handle specific commands
      if (command.toLowerCase().includes('mood')) {
        // Could navigate to mood tracker
      } else if (command.toLowerCase().includes('workout')) {
        // Could navigate to fitness
      }

    } catch (error) {
      console.error("Error processing voice command:", error);
      setAiResponse("I'm sorry, I didn't quite catch that. Could you try again?");
    }

    setIsProcessingVoice(false);
  };

  const handleOnboardingComplete = (aiResult) => {
    setShowOnboarding(false);
    setAiInsight(aiResult.welcome_message);
    setRecommendations(aiResult.personalized_tips || []);
    loadDashboardData();
  };

  if (showOnboarding) {
    return <OnboardingFlow onComplete={handleOnboardingComplete} />;
  }

  if (isLoading) {
    return (
      <div className="p-6 space-y-6">
        <div className="animate-pulse space-y-4">
          <div className="h-8 bg-gray-200 rounded w-1/3"></div>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            {[1,2,3,4].map(i => (
              <div key={i} className="h-32 bg-gray-200 rounded-xl"></div>
            ))}
          </div>
        </div>
      </div>
    );
  }

  const averageMood = moodData.length > 0 
    ? (moodData.reduce((sum, entry) => sum + entry.mood_score, 0) / moodData.length).toFixed(1)
    : 0;

  const completedWorkouts = workouts.filter(w => w.completed).length;

  return (
    <div className="p-4 md:p-8 space-y-8 relative">
      <motion.div
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6 }}
        className="text-center"
      >
        <h1 className="text-4xl font-bold bg-gradient-to-r from-green-600 via-blue-600 to-purple-600 bg-clip-text text-transparent mb-2">
          Welcome back, {user?.full_name?.split(' ')[0] || 'Wellness Warrior'}! 
        </h1>
        <p className="text-gray-600 text-lg">Let's continue your wellness journey together</p>
        {user?.ai_personality?.coach_name && (
          <p className="text-sm text-purple-600 mt-1">
            Your AI Coach: {user.ai_personality.coach_name} is here to help
          </p>
        )}
      </motion.div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <StatsCard
          title="Current Streak"
          value={`${user?.current_streak || 0} days`}
          icon={Calendar}
          gradient="from-green-500 to-emerald-500"
          trend="Keep it up!"
          delay={0.1}
        />
        <StatsCard
          title="Average Mood"
          value={`${averageMood}/10`}
          icon={Heart}
          gradient="from-pink-500 to-rose-500"
          subtitle="Last 7 days"
          delay={0.2}
        />
        <StatsCard
          title="Workouts Completed"
          value={completedWorkouts}
          icon={Activity}
          gradient="from-blue-500 to-cyan-500"
          trend="This week"
          delay={0.3}
        />
        <StatsCard
          title="Wellness Level"
          value={user?.level || 1}
          icon={Award}
          gradient="from-yellow-500 to-orange-500"
          subtitle={`${user?.total_points || 0} points`}
          delay={0.4}
        />
      </div>

      <div className="grid lg:grid-cols-3 gap-8">
        <div className="lg:col-span-2 space-y-6">
          <motion.div
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ delay: 0.5, duration: 0.6 }}
          >
            <RealTimeMetrics 
              onMetricUpdate={(type, value) => {
                console.log(`Metric updated: ${type} = ${value}`);
              }}
            />
          </motion.div>

          <motion.div
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ delay: 0.6, duration: 0.6 }}
          >
            <WellnessCalendar selectedDate={new Date()} />
          </motion.div>
        </div>

        <div className="space-y-6">
          <AIInsightCard 
            insight={aiInsight}
            recommendations={recommendations}
          />
          
          <motion.div
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ delay: 0.7, duration: 0.6 }}
          >
            <div className="wellness-card rounded-2xl p-6 shadow-lg">
              <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
                <Target className="w-5 h-5 text-green-600" />
                Quick Actions
              </h3>
              <div className="space-y-3">
                <button 
                  onClick={() => window.location.href = '/MoodTracker'}
                  className="w-full bg-gradient-to-r from-green-500 to-emerald-500 text-white rounded-xl py-3 font-medium hover:shadow-lg transition-all duration-300"
                >
                  Log Today's Mood
                </button>
                <button 
                  onClick={() => window.location.href = '/Fitness'}
                  className="w-full bg-gradient-to-r from-blue-500 to-cyan-500 text-white rounded-xl py-3 font-medium hover:shadow-lg transition-all duration-300"
                >
                  Start Workout
                </button>
                <button 
                  onClick={() => window.location.href = '/Music'}
                  className="w-full bg-gradient-to-r from-purple-500 to-pink-500 text-white rounded-xl py-3 font-medium hover:shadow-lg transition-all duration-300"
                >
                  Get Music Therapy
                </button>
              </div>
            </div>
          </motion.div>

          <motion.div
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ delay: 0.8, duration: 0.6 }}
          >
            <div className="wellness-card rounded-2xl p-6 shadow-lg">
              <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
                <Mic className="w-5 h-5 text-purple-600" />
                Voice Commands
              </h3>
              <div className="space-y-2 text-sm text-gray-600">
                <p>Try saying:</p>
                <div className="space-y-1">
                  <p>• "How am I doing today?"</p>
                  <p>• "Log my mood as happy"</p>
                  <p>• "Start a workout session"</p>
                  <p>• "What should I eat for lunch?"</p>
                  <p>• "Schedule meditation for 6 PM"</p>
                </div>
              </div>
            </div>
          </motion.div>
        </div>
      </div>

      {/* Voice Interface */}
      <VoiceInterface
        onVoiceCommand={handleVoiceCommand}
        isProcessing={isProcessingVoice}
        aiResponse={aiResponse}
      />
    </div>
  );
}
