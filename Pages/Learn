import React, { useState, useEffect } from 'react';
import { Course, Chapter, User } from '@/entities/all';
import { InvokeLLM } from '@/integrations/Core';
import { createPageUrl } from '@/utils';
import { Link } from 'react-router-dom';
import { Button } from "@/components/ui/button";
import { Card, CardHeader, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { 
  BookOpen, 
  PlayCircle, 
  Clock, 
  Users, 
  Star, 
  Trophy,
  Search,
  Filter,
  Sparkles,
  TrendingUp,
  Award,
  CheckCircle,
  Lock,
  Zap,
  Brain,
  Target
} from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';

export default function LearnPage() {
  const [courses, setCourses] = useState([]);
  const [chapters, setChapters] = useState([]);
  const [user, setUser] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [categoryFilter, setCategoryFilter] = useState('All');
  const [difficultyFilter, setDifficultyFilter] = useState('All');
  const [recommendedCourses, setRecommendedCourses] = useState([]);
  const [userProgress, setUserProgress] = useState({});
  const [isGeneratingRecommendations, setIsGeneratingRecommendations] = useState(false);

  useEffect(() => {
    loadData();
    generatePersonalizedRecommendations();
  }, []);

  const loadData = async () => {
    try {
      const [coursesData, chaptersData, userData] = await Promise.all([
        Course.list(),
        Chapter.list(),
        User.me()
      ]);
      
      setCourses(coursesData);
      setChapters(chaptersData);
      setUser(userData);
      
      // Calculate progress for each course
      const progressData = {};
      coursesData.forEach(course => {
        const courseChapters = chaptersData.filter(ch => ch.course_id === course.id);
        const completedChapters = courseChapters.filter(ch => 
          userData.completed_chapters?.includes(ch.id)
        ).length;
        
        progressData[course.id] = {
          completed: completedChapters,
          total: courseChapters.length,
          percentage: courseChapters.length > 0 ? Math.round((completedChapters / courseChapters.length) * 100) : 0
        };
      });
      
      setUserProgress(progressData);
    } catch (error) {
      console.error("Error loading data:", error);
    }
  };

  const generatePersonalizedRecommendations = async () => {
    setIsGeneratingRecommendations(true);
    try {
      const userData = await User.me();
      const prompt = `
        Based on this user's wellness profile, recommend the top 3 courses they should take:
        - Goals: ${userData.wellness_goals?.join(', ') || 'General wellness'}
        - Current level: ${userData.level || 1}
        - Activity level: ${userData.profile_setup?.activity_level || 'unknown'}
        - Stress level: ${userData.profile_setup?.stress_level || 5}/10
        
        Available courses: Foundations of Mindfulness, Nutrition for Brain Power, The Science of Sleep, Resilience in the Digital Age, Strength Training Fundamentals
        
        Provide course recommendations with reasoning.
      `;

      const result = await InvokeLLM({
        prompt,
        response_json_schema: {
          type: "object",
          properties: {
            recommendations: {
              type: "array",
              items: {
                type: "object",
                properties: {
                  course_title: { type: "string" },
                  reasoning: { type: "string" },
                  priority: { type: "string", "enum": ["high", "medium", "low"] }
                }
              }
            }
          }
        }
      });

      setRecommendedCourses(result.recommendations || []);
    } catch (error) {
      console.error("Error generating recommendations:", error);
    }
    setIsGeneratingRecommendations(false);
  };

  const categories = ['All', ...new Set(courses.map(c => c.category))];
  const difficulties = ['All', 'Beginner', 'Intermediate', 'Advanced'];
  
  const filteredCourses = courses.filter(course => 
    course.title.toLowerCase().includes(searchTerm.toLowerCase()) &&
    (categoryFilter === 'All' || course.category === categoryFilter) &&
    (difficultyFilter === 'All' || course.difficulty === difficultyFilter)
  );

  const getCourseStatus = (courseId) => {
    const progress = userProgress[courseId];
    if (!progress) return 'not_started';
    if (progress.percentage === 100) return 'completed';
    if (progress.percentage > 0) return 'in_progress';
    return 'not_started';
  };

  const getStatusBadge = (status, progress) => {
    switch (status) {
      case 'completed':
        return <Badge className="bg-green-100 text-green-800"><CheckCircle className="w-3 h-3 mr-1" />Completed</Badge>;
      case 'in_progress':
        return <Badge className="bg-blue-100 text-blue-800"><PlayCircle className="w-3 h-3 mr-1" />{progress.percentage}% Complete</Badge>;
      default:
        return <Badge variant="outline"><Lock className="w-3 h-3 mr-1" />Start Course</Badge>;
    }
  };

  return (
    <div className="p-4 md:p-8 max-w-7xl mx-auto space-y-8">
      {/* Header */}
      <motion.div
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        className="text-center space-y-4"
      >
        <h1 className="text-4xl md:text-5xl font-bold bg-gradient-to-r from-blue-600 via-purple-600 to-green-600 bg-clip-text text-transparent">
          Wellness University
        </h1>
        <p className="text-gray-600 text-lg max-w-2xl mx-auto">
          Master your wellness journey with AI-curated courses, expert-led content, and personalized learning paths
        </p>
        
        {/* Quick Stats */}
        <div className="flex justify-center gap-8 mt-6">
          <div className="text-center">
            <div className="text-2xl font-bold text-blue-600">{courses.length}</div>
            <div className="text-sm text-gray-600">Expert Courses</div>
          </div>
          <div className="text-center">
            <div className="text-2xl font-bold text-green-600">{chapters.length}</div>
            <div className="text-sm text-gray-600">Video Lessons</div>
          </div>
          <div className="text-center">
            <div className="text-2xl font-bold text-purple-600">{user?.completed_chapters?.length || 0}</div>
            <div className="text-sm text-gray-600">Completed</div>
          </div>
        </div>
      </motion.div>

      {/* AI Recommendations */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.1 }}
      >
        <Card className="wellness-card border-0 shadow-xl bg-gradient-to-r from-purple-50 to-blue-50">
          <CardHeader>
            <div className="flex items-center justify-between">
              <h2 className="text-xl font-bold flex items-center gap-2">
                <Sparkles className="w-6 h-6 text-purple-600" />
                AI-Powered Recommendations
              </h2>
              <Button 
                onClick={generatePersonalizedRecommendations}
                disabled={isGeneratingRecommendations}
                variant="outline"
                size="sm"
              >
                {isGeneratingRecommendations ? (
                  <div className="flex items-center gap-2">
                    <div className="w-4 h-4 border-2 border-purple-600 border-t-transparent rounded-full animate-spin" />
                    Analyzing...
                  </div>
                ) : (
                  <>
                    <Brain className="w-4 h-4 mr-1" />
                    Refresh
                  </>
                )}
              </Button>
            </div>
          </CardHeader>
          <CardContent>
            {recommendedCourses.length > 0 ? (
              <div className="grid md:grid-cols-3 gap-4">
                {recommendedCourses.map((rec, index) => {
                  const course = courses.find(c => c.title === rec.course_title);
                  if (!course) return null;
                  
                  return (
                    <motion.div
                      key={course.id}
                      initial={{ opacity: 0, x: -20 }}
                      animate={{ opacity: 1, x: 0 }}
                      transition={{ delay: index * 0.1 }}
                    >
                      <Link to={createPageUrl(`CourseDetails?id=${course.id}`)}>
                        <Card className={`hover:shadow-lg transition-all duration-300 border-2 ${
                          rec.priority === 'high' ? 'border-red-200 bg-red-50' :
                          rec.priority === 'medium' ? 'border-yellow-200 bg-yellow-50' :
                          'border-green-200 bg-green-50'
                        }`}>
                          <CardContent className="p-4">
                            <div className="flex items-center gap-2 mb-2">
                              <Badge className={
                                rec.priority === 'high' ? 'bg-red-100 text-red-800' :
                                rec.priority === 'medium' ? 'bg-yellow-100 text-yellow-800' :
                                'bg-green-100 text-green-800'
                              }>
                                {rec.priority.toUpperCase()} PRIORITY
                              </Badge>
                            </div>
                            <h3 className="font-semibold text-gray-900 mb-2">{course.title}</h3>
                            <p className="text-sm text-gray-600 mb-3">{rec.reasoning}</p>
                            <div className="flex items-center justify-between">
                              <span className="text-xs text-gray-500">{course.category}</span>
                              <Target className="w-4 h-4 text-purple-600" />
                            </div>
                          </CardContent>
                        </Card>
                      </Link>
                    </motion.div>
                  );
                })}
              </div>
            ) : (
              <div className="text-center py-8">
                <Brain className="w-12 h-12 mx-auto mb-3 text-gray-400" />
                <p className="text-gray-600">AI is analyzing your profile to generate personalized recommendations...</p>
              </div>
            )}
          </CardContent>
        </Card>
      </motion.div>

      {/* Search and Filters */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.2 }}
        className="flex flex-col md:flex-row gap-4"
      >
        <div className="relative flex-1">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
          <Input 
            placeholder="Search courses by title, category, or skills..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="pl-10"
          />
        </div>
        <div className="flex gap-2">
          <Select value={categoryFilter} onValueChange={setCategoryFilter}>
            <SelectTrigger className="w-40">
              <Filter className="w-4 h-4 mr-2" />
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              {categories.map(cat => (
                <SelectItem key={cat} value={cat}>{cat}</SelectItem>
              ))}
            </SelectContent>
          </Select>
          <Select value={difficultyFilter} onValueChange={setDifficultyFilter}>
            <SelectTrigger className="w-36">
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              {difficulties.map(diff => (
                <SelectItem key={diff} value={diff}>{diff}</SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
      </motion.div>

      {/* Learning Path Progress */}
      {user?.wellness_goals && user.wellness_goals.length > 0 && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.3 }}
        >
          <Card className="wellness-card border-0 shadow-lg">
            <CardHeader>
              <h2 className="text-xl font-bold flex items-center gap-2">
                <TrendingUp className="w-6 h-6 text-green-600" />
                Your Learning Journey
              </h2>
            </CardHeader>
            <CardContent>
              <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-4">
                {user.wellness_goals.map((goal, index) => {
                  const relatedCourses = courses.filter(course => {
                    const goalMapping = {
                      'mental_health': ['Mindfulness', 'Mental Resilience'],
                      'better_sleep': ['Sleep Hygiene'],
                      'nutrition': ['Nutrition'],
                      'fitness': ['Fitness Science']
                    };
                    return goalMapping[goal]?.includes(course.category);
                  });
                  
                  const totalProgress = relatedCourses.reduce((sum, course) => {
                    return sum + (userProgress[course.id]?.percentage || 0);
                  }, 0);
                  
                  const avgProgress = relatedCourses.length > 0 ? totalProgress / relatedCourses.length : 0;
                  
                  return (
                    <motion.div
                      key={goal}
                      initial={{ opacity: 0, scale: 0.9 }}
                      animate={{ opacity: 1, scale: 1 }}
                      transition={{ delay: 0.4 + index * 0.1 }}
                    >
                      <Card className="bg-gradient-to-br from-blue-50 to-purple-50 border border-blue-200">
                        <CardContent className="p-4">
                          <h3 className="font-semibold text-gray-900 mb-2 capitalize">
                            {goal.replace('_', ' ')}
                          </h3>
                          <Progress value={avgProgress} className="mb-2" />
                          <div className="flex justify-between text-sm">
                            <span className="text-gray-600">{Math.round(avgProgress)}% Complete</span>
                            <span className="text-blue-600">{relatedCourses.length} courses</span>
                          </div>
                        </CardContent>
                      </Card>
                    </motion.div>
                  );
                })}
              </div>
            </CardContent>
          </Card>
        </motion.div>
      )}

      {/* Course Grid */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.4 }}
      >
        <div className="flex items-center justify-between mb-6">
          <h2 className="text-2xl font-bold text-gray-900">All Courses</h2>
          <Badge variant="outline" className="text-sm">
            {filteredCourses.length} course{filteredCourses.length !== 1 ? 's' : ''} found
          </Badge>
        </div>
        
        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
          <AnimatePresence>
            {filteredCourses.map((course, index) => {
              const progress = userProgress[course.id];
              const status = getCourseStatus(course.id);
              const courseChapters = chapters.filter(ch => ch.course_id === course.id);
              
              return (
                <motion.div
                  key={course.id}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -20 }}
                  transition={{ delay: index * 0.1 }}
                  className="h-full"
                >
                  <Link to={createPageUrl(`CourseDetails?id=${course.id}`)}>
                    <Card className="wellness-card border-0 shadow-lg hover:shadow-xl transition-all duration-300 group h-full flex flex-col overflow-hidden">
                      <CardHeader className="p-0 relative">
                        <div className="relative overflow-hidden">
                          <img 
                            src={course.cover_image_url} 
                            alt={course.title}
                            className="w-full h-48 object-cover group-hover:scale-105 transition-transform duration-300"
                            onError={(e) => {
                              e.target.src = `https://images.unsplash.com/photo-1434030216411-0b793f4b4173?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80`;
                            }}
                          />
                          <div className="absolute top-4 left-4">
                            <Badge className={`${
                              course.difficulty === 'Beginner' ? 'bg-green-100 text-green-800' :
                              course.difficulty === 'Intermediate' ? 'bg-yellow-100 text-yellow-800' :
                              'bg-red-100 text-red-800'
                            }`}>
                              {course.difficulty}
                            </Badge>
                          </div>
                          <div className="absolute top-4 right-4">
                            {getStatusBadge(status, progress)}
                          </div>
                        </div>
                      </CardHeader>
                      
                      <CardContent className="p-6 flex flex-col flex-grow">
                        <div className="flex items-center gap-2 mb-3">
                          <Badge variant="outline">{course.category}</Badge>
                          <div className="flex items-center gap-1 text-yellow-500">
                            <Star className="w-3 h-3 fill-current" />
                            <span className="text-xs text-gray-600">4.9</span>
                          </div>
                        </div>
                        
                        <h3 className="font-bold text-lg text-gray-900 mb-2 group-hover:text-blue-600 transition-colors">
                          {course.title}
                        </h3>
                        <p className="text-sm text-gray-600 mb-4 flex-grow">{course.description}</p>
                        
                        <div className="space-y-3">
                          <div className="flex items-center justify-between text-sm text-gray-600">
                            <div className="flex items-center gap-1">
                              <BookOpen className="w-4 h-4" />
                              <span>{courseChapters.length} chapters</span>
                            </div>
                            <div className="flex items-center gap-1">
                              <Clock className="w-4 h-4" />
                              <span>{courseChapters.reduce((sum, ch) => sum + (ch.duration_minutes || 0), 0)}m</span>
                            </div>
                            <div className="flex items-center gap-1">
                              <Users className="w-4 h-4" />
                              <span>2.4k</span>
                            </div>
                          </div>
                          
                          {progress && progress.percentage > 0 && (
                            <div>
                              <div className="flex justify-between text-xs text-gray-500 mb-1">
                                <span>Progress</span>
                                <span>{progress.percentage}%</span>
                              </div>
                              <Progress value={progress.percentage} className="h-2" />
                            </div>
                          )}
                        </div>
                      </CardContent>
                    </Card>
                  </Link>
                </motion.div>
              );
            })}
          </AnimatePresence>
        </div>
        
        {filteredCourses.length === 0 && (
          <div className="text-center py-12">
            <BookOpen className="w-16 h-16 mx-auto mb-4 text-gray-400" />
            <h3 className="text-lg font-semibold text-gray-900 mb-2">No courses found</h3>
            <p className="text-gray-600">Try adjusting your search or filters to find more courses.</p>
          </div>
        )}
      </motion.div>

      {/* Learning Achievements */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.5 }}
      >
        <Card className="wellness-card border-0 shadow-lg bg-gradient-to-r from-yellow-50 to-orange-50">
          <CardHeader>
            <h2 className="text-xl font-bold flex items-center gap-2">
              <Award className="w-6 h-6 text-orange-600" />
              Learning Achievements
            </h2>
          </CardHeader>
          <CardContent>
            <div className="grid md:grid-cols-3 gap-4">
              <div className="text-center p-4 bg-white rounded-lg">
                <Trophy className="w-8 h-8 mx-auto mb-2 text-yellow-600" />
                <div className="text-2xl font-bold text-gray-900">{user?.completed_chapters?.length || 0}</div>
                <div className="text-sm text-gray-600">Chapters Completed</div>
              </div>
              <div className="text-center p-4 bg-white rounded-lg">
                <Zap className="w-8 h-8 mx-auto mb-2 text-blue-600" />
                <div className="text-2xl font-bold text-gray-900">{user?.current_streak || 0}</div>
                <div className="text-sm text-gray-600">Day Learning Streak</div>
              </div>
              <div className="text-center p-4 bg-white rounded-lg">
                <Star className="w-8 h-8 mx-auto mb-2 text-purple-600" />
                <div className="text-2xl font-bold text-gray-900">{Math.floor((user?.completed_chapters?.length || 0) / 5)}</div>
                <div className="text-sm text-gray-600">Courses Completed</div>
              </div>
            </div>
          </CardContent>
        </Card>
      </motion.div>
    </div>
  );
}
